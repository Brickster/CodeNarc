        --------------------------------------------------
                      CodeNarc - Braces Rules
        --------------------------------------------------

Braces Rules  ("<rulesets/braces.xml>")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* {ElseBlockBraces} Rule
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Checks that <else> blocks use braces, even for a single statement.

  By default, braces are not required for an <else> if it is followed immediately by an <if>.
  Set the <bracesRequiredForElseIf> property to true to require braces is that situation as well.

*-------------------------+----------------------------------------------------------------+------------------------+
| <<Property>>            | <<Description>>                                                | <<Default Value>>      |
*-------------------------+----------------------------------------------------------------+------------------------+
| bracesRequiredForElseIf | Set to <<<true>>> to require braces for an <else> block        | <<<false>>>            |
|                         | followed immediately by an <if> statement.                     |                        |
*-------------------------+----------------------------------------------------------------+------------------------+


* {ForStatementBraces} Rule
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Checks that <for> statements use braces, even for a single statement.


* {IfStatementBraces} Rule
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Checks that <if> statements use braces, even for a single statement.


* {WhileStatementBraces} Rule
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Checks that while statements use braces, even for a single statement.


* {ClassEndsWithBlankLineBeforeClosingBraceRequiredRule} Rule
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  <Since CodeNarc 1.2>

Check the location of the closing brace of a class. By default, it enforces that there must be a blank line before
the closing class brace, except if the class is empty and is written in a single line. A blank line is defined as
any line that does not contain any visible characters.
This rule can be configured with the following properties:
<ul>
 <li><i>singleLineClassesAllowed</i>: a boolean property to forbid single line classes.If it is false, then single line
 classes are considered a violation. Default value is true
 </li>
 <li><i>blankLineBeforeClosingBrace</i>: a boolean property to define if there may be a blank line before the closing
 class brace. If it is false, the last line before the brace must not be blank. Otherwise, it must be blank. Default
 value is true
 </li>
<ul>
*----------------------------+----------------------------------------------------------------+------------------------+
| <<Property>>               | <<Description>>                                                | <<Default Value>>      |
*----------------------------+----------------------------------------------------------------+------------------------+
| singleLineClassesAllowed   | a boolean property to forbid single line classes.If it is      |                        |
|                            |  false,then single line classes are considered a violation.    | <<<true>>>             |
*----------------------------+----------------------------------------------------------------+------------------------+
|blankLineBeforeClosingBrace | a boolean property to define if there may be a blank line      | <<<true>>>             |
|                            | before the closing class brace. If it is false, the last line  |                        |
|                            | before the brace must not be blank. Otherwise, it must be      |                        |
|                            | blank.                                                         |                        |
*----------------------------+----------------------------------------------------------------+------------------------+

  Example of violations:

If singleLineClassesAllowed is <<<true>>> and blankLineBeforeClosingBrace is <<<true>>>
-------------------------------------------------------------------------------
            class Foo {
                int a

                void hi() {
                }
            }
-------------------------------------------------------------------------------

If singleLineClassesAllowed is <<<false>>> and blankLineBeforeClosingBrace is <<<true>>>
-------------------------------------------------------------------------------
            class Foo extends Bar<String> { }
-------------------------------------------------------------------------------


If singleLineClassesAllowed is <<<true>>> and blankLineBeforeClosingBrace is <<<false>>>
-------------------------------------------------------------------------------
            class Foo {
                int a

                void hi() {
                }

            }
-------------------------------------------------------------------------------

If singleLineClassesAllowed is <<<false>>> and blankLineBeforeClosingBrace is <<<false>>>
-------------------------------------------------------------------------------
            class Foo {
                int a

                void hi() {
                }

            }
-------------------------------------------------------------------------------
