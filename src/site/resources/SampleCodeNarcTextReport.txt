CodeNarc Report: Sample Project - Sep 9, 2017 12:34:41 PM

Summary: TotalFiles=365 FilesWithViolations=37 P1=0 P2=52 P3=29

File: AbstractAstVisitorRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]
    Violation: Rule=MisorderedStaticImports P=3 Line=23 Msg=[Static imports should appear before normal imports] Src=[import static org.junit.Assert.assertFalse]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=184 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.doNotApplyToClassNames = 'Xxx'        // doNotApply = NO]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=187 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.applyToClassNames = 'Xxx'             // apply = NO]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=188 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.doNotApplyToClassNames = 'Xxx'        // doNotApply = NO]

File: AbstractRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=24 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.assertContainsAll]
    Violation: Rule=MisorderedStaticImports P=3 Line=25 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=137 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.doNotApplyToFilesMatching = NO_MATCH    // doNotApply = NO]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=140 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.applyToFilesMatching = NO_MATCH         // apply = NO]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=141 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.doNotApplyToFilesMatching = NO_MATCH    // doNotApply = NO]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=177 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.applyToFileNames = 'org/codenarc/MyOtherTest.groovy']
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=225 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.doNotApplyToFileNames = 'Xxx.groovy'    // doNotApply = NO]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=228 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.applyToFileNames = 'Xxx.groovy'         // apply = NO]
    Violation: Rule=UnnecessaryObjectReferences P=3 Line=229 Msg=[The code could be more concise by using a with() or identity() block] Src=[rule.doNotApplyToFileNames = 'Xxx.groovy'    // doNotApply = NO]

File: InlineViolationsParserTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=20 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.rule.InlineViolationsParser.inlineViolation]
    Violation: Rule=UnnecessaryReturnKeyword P=3 Line=199 Msg=[The return keyword is not needed and can be removed] Src=[return [lineNumber: lineNumber, sourceLineText: sourceLineText, messageText: messageText]]

File: design/NestedForLoopRuleTest.groovy
    Violation: Rule=UnnecessaryReturnKeyword P=3 Line=105 Msg=[The return keyword is not needed and can be removed] Src=[return inlineViolation('Nested for loop')]

File: design/PrivateFieldCouldBeFinalRuleTest.groovy
    Violation: Rule=MethodCount P=2 Line=27 Msg=[Class org.codenarc.rule.design.PrivateFieldCouldBeFinalRuleTest has 33 methods] Src=[class PrivateFieldCouldBeFinalRuleTest extends AbstractRuleTestCase {]

File: formatting/BracesForForLoopRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=102 Msg=[The String '
            for(String name=${SomeClass.SOME_CONSTANT}; name==null;)  // And what about {}
            {
                doStuff()
            }
        ' contains a GString-type expression: '${SomeClass.SOME_CONSTANT}; name==null;)  // And what about {}'] Src=[final SOURCE = ''']

File: formatting/BracesForIfElseRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=60 Msg=[The String '
            if (someContainer."${SomeClass.SOME_CONSTANT}" != null)  // And what about {}
            {
                doStuff()
            }
        ' contains a GString-type expression: '${SomeClass.SOME_CONSTANT}" != null)  // And what about {}'] Src=[final SOURCE = ''']

File: formatting/BracesForMethodRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=286 Msg=[The String '
            class MyClass {
                int size(String name = "${SomeClass.SOME_CONSTANT}")
                {
                    return 99
                }
            }
        ' contains a GString-type expression: '${SomeClass.SOME_CONSTANT}'] Src=[final SOURCE = ''']

File: formatting/SpaceAfterClosingBraceRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=39 Msg=[The String '
            class MyClass {
                def myMethod() {
                    def closure = { }
                    if (true) { }
                    while(ready) { }
                    try {
                    } catch(Exception e) {
                    } finally { }
                    for(int i=0; i<10; i++) { }
                    for(String name in names) { }
                    for(String name: names) { }
                    if (count > this."maxPriority${priority}Violations") { }
                    while (count > this."maxPriority${priority}Violations") { }
                }
                MyClass() {
                    this(classNames)
                }
                static void reset() { violationCounts = [1:0, 2:0, 3:0] }
                void doStuff() { println 9 }
            }
            interface MyInterface { }
            enum MyEnum { OK, BAD }
        ' contains a GString-type expression: '${priority}Violations") { }'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=293 Msg=[The String '
            def foo = 1
            "I am a ${ -> foo }"
        ' contains a GString-type expression: '${ -> foo }'] Src=[assertNoViolations(''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=301 Msg=[The String '
            def foo = 1
            "I am a ${ -> foo }0"
        ' contains a GString-type expression: '${ -> foo }'] Src=[assertNoViolations(''']

File: formatting/SpaceAfterOpeningBraceRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=39 Msg=[The String '
            class MyClass {
                def myMethod() {
                    def closure = { }
                    if (true) { }
                    while(ready) { }
                    try {
                    } catch(Exception e) {
                    } finally { }
                    for(int i=0; i<10; i++) { }
                    for(String name in names) { }
                    for(String name: names) { }
                    if (count > this."maxPriority${priority}Violations") { }
                    while (count > this."maxPriority${priority}Violations") { }
                }
                MyClass() {
                    this(classNames)
                }
            }
            interface MyInterface { }
            enum MyEnum { OK, BAD }
            trait MyTrait { }
        ' contains a GString-type expression: '${priority}Violations") { }'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=79 Msg=[The String '
            class MyClass {
                def myMethod() {
                    def closure = {}
                    if (true) {}
                    while(ready) {}
                    try {
                    } catch(Exception e) {
                    } finally {}
                    for(int i=0; i<10; i++) {}
                    for(String name in names) {}
                    for(String name: names) {}
                    if (count > this."maxPriority${priority}Violations") {}
                    while (count > this."maxPriority${priority}Violations") {}
                }
                void doStuff2() {}
            }
            interface MyInterface2 {}
        ' contains a GString-type expression: '${priority}Violations") {}'] Src=[final SOURCE = ''']

File: formatting/SpaceAroundMapEntryColonRuleTest.groovy
    Violation: Rule=UnnecessaryReturnKeyword P=3 Line=116 Msg=[The return keyword is not needed and can be removed] Src=[return inlineViolation("The colon for the literal Map entry for key [$keyName] within class $className" +]

File: formatting/SpaceBeforeClosingBraceRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=40 Msg=[The String '
            class MyClass {
                def myMethod() {
                    def closure = { }
                    if (true) { }
                    while(ready) { }
                    try {
                    } catch(Exception e) {
                    } finally { }
                    for(int i=0; i<10; i++) { }
                    for(String name in names) { }
                    for(String name: names) { }
                    if (count > this."maxPriority${priority}Violations") { }
                    while (count > this."maxPriority${priority}Violations") { }
                }
                MyClass() {
                    this(classNames)
                }
                static void reset() { violationCounts = [1:0, 2:0, 3:0] }
                void doStuff() { println 9 }
            }
            interface MyInterface { }
            enum MyEnum { OK, BAD }
        ' contains a GString-type expression: '${priority}Violations") { }'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=81 Msg=[The String '
            class MyClass {
                def myMethod() {
                    def closure = {}
                    if (true) {}
                    while(ready) {}
                    try {
                    } catch(Exception e) {
                    } finally {}
                    for(int i=0; i<10; i++) {}
                    for(String name in names) {}
                    for(String name: names) {}
                    if (count > this."maxPriority${priority}Violations") {}
                    while (count > this."maxPriority${priority}Violations") {}
                }
                void doStuff2() {}
            }
            interface MyInterface2 {}
        ' contains a GString-type expression: '${priority}Violations") {}'] Src=[final SOURCE = ''']

File: formatting/SpaceBeforeOpeningBraceRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=39 Msg=[The String '
            class MyClass {
                def myMethod() {
                    def closure = { }
                    if (true) { }
                    while(ready) { }
                    try {
                    } catch(Exception e) {
                    } finally { }
                    for(int i=0; i<10; i++) { }
                    for(String name in names) { }
                    for(String name: names) { }
                    if (count > this."maxPriority${priority}Violations") { }
                    while (count > this."maxPriority${priority}Violations") { }
                }
                MyClass() {
                    this(classNames)
                }
            }
            interface MyInterface { }
            enum MyEnum { OK, BAD }
            trait MyTrait { }
        ' contains a GString-type expression: '${priority}Violations") { }'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=255 Msg=[The String '
            def foo = 1
            "I am a ${ -> foo }"
        ' contains a GString-type expression: '${ -> foo }'] Src=[assertNoViolations(''']

File: generic/IllegalPackageReferenceRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=65 Msg=[The String '
            if (value.class == org.bad.BadClass) { }
            println "isClosure=${value instanceof org.bad.OtherClass}"
            def count = org.bad.Helper.getCount()
        ' contains a GString-type expression: '${value instanceof org.bad.OtherClass}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=73 Msg=[The String 'println "isClosure=${value instanceof org.bad.OtherClass}"' contains a GString-type expression: '${value instanceof org.bad.OtherClass}'] Src=[[lineNumber:3, sourceLineText:'println "isClosure=${value instanceof org.bad.OtherClass}"', messageText:'org.bad'],]

File: generic/RequiredRegexRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.containsAll]

File: grails/GrailsMassAssignmentRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=37 Msg=[The String '
            class Person {
                String name
                Boolean isAdmin
            }
            def bindingMap = [name: 'John', isAdmin: true]
            def person = new Person()
            def p2 = new Person("It is currently ${ new Date() }")
            def p3 = new Person(bindingMap)
            person.name = bindingMap['name']
            person.isAdmin = bindingMap.isAdmin
            person.properties = "It is currently ${ new Date() }"
        ' contains a GString-type expression: '${ new Date() }'] Src=[final SOURCE = ''']

File: grails/GrailsServletContextReferenceRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=79 Msg=[The String '
            class MyClass {
                def mySession = servletContext

                def edit = {
                    println "amount=${servletContext.amount}"
                }
            }
        ' contains a GString-type expression: '${servletContext.amount}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=88 Msg=[The String 'println "amount=${servletContext.amount}"' contains a GString-type expression: '${servletContext.amount}'] Src=[assertTwoViolations(SOURCE, 3, 'def mySession = servletContext', 6, 'println "amount=${servletContext.amount}"')]

File: groovyism/GStringAsMapKeyRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=45 Msg=[The String '
            Map map = ["${ someRef }" : 'invalid' ]
        ' contains a GString-type expression: '${ someRef }'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=49 Msg=[The String '["${ someRef }" :' contains a GString-type expression: '${ someRef }'] Src=[2, '["${ someRef }" :')]

File: groovyism/GStringExpressionWithinStringRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=50 Msg=[The String '
            class SomeClass {
                @SomeAnnotationOnField('${sample.property1}')
                String sampleProperty

                @SomeAnnotationOnMethod('${sample.property2}')
                void method() {
                }
            }
        ' contains a GString-type expression: '${sample.property1}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=65 Msg=[The String '
            @SomeAnnotationOnClass('${sample.property1}')
            class SomeClass {
                @SomeAnnotationOnField('${sample.property2}')
                String sampleProperty

                @SomeAnnotationOnMethod('${sample.property3}')
                void method() {
                }
            }
        ' contains a GString-type expression: '${sample.property1}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=81 Msg=[The String '
            @SomeAnnotationOnClass(attribute='${sample.property1}',
                            nested=[@NestedAnnotation('${sample.property2}'), 
                                    @NestedAnnotation('${sample.property3}')],  
                             someOtherAttribute='${sample.property4}')
            class SomeClass {
            }
        ' contains a GString-type expression: '${sample.property1}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=94 Msg=[The String '
            @SomeAnnotationOnClass(attribute=['${sample.property1}', '${sample.property2}'])
            class SomeClass {
            }
        ' contains a GString-type expression: '${sample.property1}', '${sample.property2}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=104 Msg=[The String '
            def valueToBeReplaced = '123'
            def str1 = "123"
            def str2 = "abc def ghi"
            def str3 = "abc ${count}"
            def str4 = "abc $count    }"
            def str5 = "abc {123}"
            def str6 = "abc ${}"
            def str7 = "total: ${count * 25}"
            def str8 = "$valueToBeReplaced $valueNotToBeReplaced"
        ' contains a GString-type expression: '${count}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=120 Msg=[The String '
            def "plugin does not apply idea plugin"() {
                given:
                buildScript << """
                    task $testTaskName {
                        doLast {
                            println "Has idea plugin: \${project.plugins.hasPlugin(IdeaPlugin)}"
                        }
                    }
                """

                expect:
                runTask(testTaskName).output.contains('Has idea plugin: false')

                where:
                testTaskName = 'hasIdeaPlugin'
            }
            ' contains a GString-type expression: '${project.plugins.hasPlugin(IdeaPlugin)}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=143 Msg=[The String '
            def str1 = 'total: ${count}'
            def str2 = 'average: ${total / count}'
        ' contains a GString-type expression: '${count}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=148 Msg=[The String 'def str1 = 'total: ${count}'' contains a GString-type expression: '${count}'] Src=[[lineNumber:2, sourceLineText:"def str1 = 'total: \${count}'", messageText:'\'${count}\''],]
    Violation: Rule=GStringExpressionWithinString P=2 Line=148 Msg=[The String ''${count}'' contains a GString-type expression: '${count}'] Src=[[lineNumber:2, sourceLineText:"def str1 = 'total: \${count}'", messageText:'\'${count}\''],]
    Violation: Rule=GStringExpressionWithinString P=2 Line=149 Msg=[The String 'def str2 = 'average: ${total / count}'' contains a GString-type expression: '${total / count}'] Src=[[lineNumber:3, sourceLineText:"def str2 = 'average: \${total / count}'", messageText:'\'${total / count}\''])]
    Violation: Rule=GStringExpressionWithinString P=2 Line=149 Msg=[The String ''${total / count}'' contains a GString-type expression: '${total / count}'] Src=[[lineNumber:3, sourceLineText:"def str2 = 'average: \${total / count}'", messageText:'\'${total / count}\''])]
    Violation: Rule=GStringExpressionWithinString P=2 Line=154 Msg=[The String '
            class SomeClass {
                @SomeAnnotationOnMethod('${sample.property}')
                void method() {
                    def str1 = 'total: ${count}'
                }
            }
        ' contains a GString-type expression: '${sample.property}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=162 Msg=[The String 'def str1 = 'total: ${count}'' contains a GString-type expression: '${count}'] Src=[assertSingleViolation(SOURCE, 5, "def str1 = 'total: \${count}'", '\'${count}\'')]
    Violation: Rule=GStringExpressionWithinString P=2 Line=162 Msg=[The String ''${count}'' contains a GString-type expression: '${count}'] Src=[assertSingleViolation(SOURCE, 5, "def str1 = 'total: \${count}'", '\'${count}\'')]

File: imports/UnusedImportRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=193 Msg=[The String '
            import test.TestData1
            import test.TestData2
            import test.TestData3
            import test.TestData4
            import test.TestData5
            import test.TestData6
            import test.TestData7
            import test.TestData8
            import test.TestData9
            import test.TestData10
            import test.TestData11
            import test.TestData12
            import test.TestData13
            import test.TestData14
            import test.TestData15

            def GSTRING1 = " ${TestData1.GOOD_XML}"
            def GSTRING2 = " $TestData2.XML"
            def MAP1 = [(TestData3):123]
            def MAP2 = [abc:TestData4]
            def MAP3 = [abc:TestData5, ddd:123]
            def LIST = [TestData6,TestData7]
            def OPERATORS1 = 0+TestData8.VALUE-TestData9.VALUE
            def OPERATORS2 = 9*TestData10.VALUE/TestData11.VALUE
            def OPERATORS3 = 64&TestData12.VALUE|TestData13.VALUE^TestData14.VALUE
            def OPERATORS4 = !TestData15.VALUE
        ' contains a GString-type expression: '${TestData1.GOOD_XML}'] Src=[final SOURCE = ''']

File: naming/ClassNameRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]

File: naming/FieldNameRuleTest.groovy
    Violation: Rule=MethodCount P=2 Line=29 Msg=[Class org.codenarc.rule.naming.FieldNameRuleTest has 32 methods] Src=[class FieldNameRuleTest extends AbstractRuleTestCase {]
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]

File: naming/MethodNameRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]

File: naming/PackageNameRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]

File: naming/ParameterNameRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]

File: naming/PropertyNameRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]

File: naming/VariableNameRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]

File: size/GMetricsSourceCodeAdapterTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFailWithMessageContaining]

File: size/ParameterCountRuleTest.groovy
    Violation: Rule=MisorderedStaticImports P=3 Line=22 Msg=[Static imports should appear before normal imports] Src=[import static org.codenarc.test.TestUtil.shouldFail]
    Violation: Rule=UnnecessaryReturnKeyword P=3 Line=253 Msg=[The return keyword is not needed and can be removed] Src=[return inlineViolation("Number of parameters in ${name} exceeds maximum allowed (${rule.maxParameters}).")]

File: unnecessary/ConsecutiveStringConcatenationRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=66 Msg=[The String '
            def b = "$Hello" + 'World'  // should be "${Hello}World"
        ' contains a GString-type expression: '${Hello}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=74 Msg=[The String '
            def c = 'Hello' + "$World"  // should be "Hello${World}"
        ' contains a GString-type expression: '${World}'] Src=[final SOURCE = ''']

File: unnecessary/UnnecessaryGStringRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=37 Msg=[The String '
            def docFile = "src/site/apt/codenarc-rules-${ruleSetName}.apt"
        ' contains a GString-type expression: '${ruleSetName}'] Src=[final SOURCE = ''']

File: unnecessary/UnnecessaryPackageReferenceRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=68 Msg=[The String '
            if (value.class == java.math.BigDecimal) { }
            println "isClosure=${value instanceof groovy.lang.Closure}"
            def processors = java.lang.Runtime.availableProcessors()
        ' contains a GString-type expression: '${value instanceof groovy.lang.Closure}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=75 Msg=[The String 'println "isClosure=${value instanceof groovy.lang.Closure}"' contains a GString-type expression: '${value instanceof groovy.lang.Closure}'] Src=[[lineNumber:3, sourceLineText:'println "isClosure=${value instanceof groovy.lang.Closure}"', messageText:'groovy.lang'],]

File: unused/UnusedMethodParameterRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=136 Msg=[The String '
            class MyClass {
                String myMethod1(String id, int value) { doSomething(value); return id }
                void myMethod2(int value) { def x = value }
                def myMethod3(Date startDate) { return "${startDate}" }
                def myMethod4(Date startDate) {
                    return new Object() {
                        def x = startDate
                    }
                }
                def myMethod5(Date startDate) {
                    return new Object() {
                        String toString() { return startDate }
                    }
                }
            }
        ' contains a GString-type expression: '${startDate}" }'] Src=[final SOURCE = ''']

File: unused/UnusedPrivateFieldRuleTest.groovy
    Violation: Rule=MethodCount P=2 Line=29 Msg=[Class org.codenarc.rule.unused.UnusedPrivateFieldRuleTest has 32 methods] Src=[class UnusedPrivateFieldRuleTest extends AbstractRuleTestCase {]
    Violation: Rule=GStringExpressionWithinString P=2 Line=168 Msg=[The String '
            class MyClass {
                private int count
                def other = this."${'count'}"
            }
        ' contains a GString-type expression: '${'count'}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=179 Msg=[The String '
            class MyClass {
                private int count
                def varName = "count"
                def other = this."${varName}"     // can't see this
            }
        ' contains a GString-type expression: '${varName}'] Src=[final SOURCE = ''']

File: unused/UnusedPrivateMethodParameterRuleTest.groovy
    Violation: Rule=GStringExpressionWithinString P=2 Line=112 Msg=[The String '
            class MyClass {
                private String myMethod1(String id, int value) { doSomething(value); return id }
                private void myMethod2(int value) { def x = value }
                private def myMethod3(Date startDate) { return "${startDate}" }
                private def myMethod4(Date startDate) {
                    return new Object() {
                        def x = startDate
                    }
                }
                private def myMethod5(Date startDate) {
                    return new Object() {
                        String toString() { return startDate }
                    }
                }
            }
        ' contains a GString-type expression: '${startDate}" }'] Src=[final SOURCE = ''']

File: unused/UnusedPrivateMethodRuleTest.groovy
    Violation: Rule=MethodCount P=2 Line=27 Msg=[Class org.codenarc.rule.unused.UnusedPrivateMethodRuleTest has 36 methods] Src=[class UnusedPrivateMethodRuleTest extends AbstractRuleTestCase {]
    Violation: Rule=GStringExpressionWithinString P=2 Line=355 Msg=[The String '
            class MyClass {
                private int countStuff() { return 99 }
                int somePublicMethod() { }
                def abc = 'abc'
                private String getName() { 'abc' }
                private getPrice() { 0.0 }

                def doStuff() {
                    def count = countStuff()
                    def newName = this.getName()
                }

                def myClosure = { println "price is ${getPrice()}" }
            }
        ' contains a GString-type expression: '${getPrice()}" }'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=424 Msg=[The String '
            class MyClass {
                static int getTotal() {
                    println "total=${MyClass.countStuff()}"
                }
                private static int countStuff() { }
            }
        ' contains a GString-type expression: '${MyClass.countStuff()}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=437 Msg=[The String '
            class MyClass {
                private int countStuff() { }
                def other = this."${countStuff}"()
            }
        ' contains a GString-type expression: '${countStuff}'] Src=[final SOURCE = ''']
    Violation: Rule=GStringExpressionWithinString P=2 Line=459 Msg=[The String '
            class MyClass {
                private int countStuff() { }
                def varName = "countStuff"
                def other = this."${varName}"()     // can't see this
            }
        ' contains a GString-type expression: '${varName}'] Src=[final SOURCE = ''']

File: unused/UnusedVariableRuleTest.groovy
    Violation: Rule=MethodCount P=2 Line=27 Msg=[Class org.codenarc.rule.unused.UnusedVariableRuleTest has 35 methods] Src=[class UnusedVariableRuleTest extends AbstractRuleTestCase {]

[CodeNarc (http://www.codenarc.org) v1.0]
